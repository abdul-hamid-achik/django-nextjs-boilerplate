version: '3'

tasks:
  open.docker:
    desc: Starts Docker engine locally
    cmds:
      - open -a Docker

  ci.push:
    desc: Runs github actions locally as if it was pushed to the repo
    cmds:
      - act push

  ci.pr:
    desc: Runs github actions locally as if it was a pull request
    cmds:
      - act pull_request

  compose.up:
    desc: Starts all services in docker-compose.yml
    cmds:
      - docker compose up -d

  compose.dev:
    desc: runs database for development
    cmds:
      - docker compose up -d database

  compose.down:
    desc: Stops all services in docker-compose.yml
    cmds:
      - docker compose down

  compose.build:
    desc: Builds all services in docker-compose.yml
    cmds:
      - docker compose build

  compose.logs:
    desc: Shows logs for all services in docker-compose.yml
    cmds:
      - docker compose logs -f backend frontend

  logs:
    desc: Shows logs for all services in docker-compose.yml
    cmds:
      - task: compose.logs

  start:
    desc: Builds containers and Starts project
    summary: |
      Builds containers and Starts project, if you want to start the project
      without building the containers use the task `dev`
    deps: [ compose.build, compose.up ]
    cmds:
      - task: logs

  dev:
    desc: Starts project without building it first hoping that it is already built
    deps: [ compose.up ]
    cmds:
      - task: logs

  reset:
    desc: Resets all services in docker-compose.yml
    deps: [ compose.down, compose.build, compose.up ]
    cmds:
      - task: logs

  default:
    desc: Starts all services in docker-compose.yml and prints logs, ideal for local development
    deps: [ dev ]

  clear:
    desc: Clears all containers and images
    cmds:
      - task: compose.down
      - docker system prune -af --volumes

  seed:
    desc: Seeds the database
    dir: backend
    cmds:
      - docker compose run --rm backend python manage.py createsuperuser --username=admin --email=admin@example.com --noinput
      - docker compose run --rm backend python manage.py changepassword admin

  migrate:
    desc: Runs migrations
    dir: backend
    cmds:
      - docker compose run --rm backend python manage.py migrate

  test.frontend:
    desc: Runs frontend tests
    dir: frontend
    cmds:
      - npm test

  test.backend:
    desc: Runs backend tests
    dir: backend
    cmds:
      - pdm test

  test:
    desc: Runs tests
    cmds:
      - task: test.frontend
      - task: test.backend

  format.frontend:
    desc: Formats the api client
    dir: frontend
    cmds:
      - npm run format

  format.backend:
    desc: Formats the backend
    dir: backend
    cmds:
      - pdm run format

  format:
    desc: Formats all code
    cmds:
      - task: format.frontend
      - task: format.backend


  lint.frontend:
    desc: Lints the frontend
    dir: frontend
    cmds:
      - npm run lint

  lint.backend:
    desc: Lints the backend
    dir: backend
    cmds:
      - pdm run lint

  lint:
    desc: Lints all code
    cmds:
      - task: lint.frontend
      - task: lint.backend

  generate-api-client:
    deps: [ compose.up ]
    desc: Generates client code for typesafe communication with backend
    aliases:
      - client
    summary:
      Generates client code for typesafe communication with backend.
      This is the same as running `docker compose run --rm frontend npm run generate-client`
      but it is much faster because it doesn't have to use docker the frontend image.
    dir: frontend
    cmds:
      - npm run generate-api-client

  routes:
    desc: Shows all routes
    dir: backend
    cmds:
      - docker compose run --rm backend python manage.py show_urls